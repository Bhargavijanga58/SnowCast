[{
  "history_id" : "lr1ja58rjmw",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\nsnotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\ndf = snotel_point.get_daily_data(\n    datetime(2020, 1, 2), datetime(2020, 1, 20),\n    [snotel_point.ALLOWED_VARIABLES.SWE]\n)\nprint(df)",
  "history_output" : "                                                                        geometry  ...  datasource\ndatetime                  site                                                    ...            \n2020-01-02 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-03 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-04 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-05 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-06 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-07 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-08 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-09 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-10 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-11 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-12 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-13 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-14 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-15 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-16 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-17 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-18 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-19 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-20 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n[19 rows x 4 columns]\n",
  "history_begin_time" : 1654519487343,
  "history_end_time" : 1654519489546,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "TyafqfQQDnVh",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\nsnotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\ndf = snotel_point.get_daily_data(\n    datetime(2020, 1, 2), datetime(2020, 1, 20),\n    [snotel_point.ALLOWED_VARIABLES.SWE]\n)\nprint(df)",
  "history_output" : "                                                                        geometry  ...  datasource\ndatetime                  site                                                    ...            \n2020-01-02 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-03 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-04 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-05 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-06 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-07 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-08 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-09 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-10 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-11 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-12 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-13 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-14 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-15 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-16 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-17 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-18 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-19 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-20 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n[19 rows x 4 columns]\n",
  "history_begin_time" : 1654519412744,
  "history_end_time" : 1654519415600,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7YvDLFJgCKL5",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\nsnotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\ndf = snotel_point.get_daily_data(\n    datetime(2020, 1, 2), datetime(2020, 1, 20),\n    [snotel_point.ALLOWED_VARIABLES.SWE]\n)\nprint(df)",
  "history_output" : "                                                                        geometry  ...  datasource\ndatetime                  site                                                    ...            \n2020-01-02 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-03 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-04 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-05 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-06 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-07 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-08 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-09 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-10 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-11 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-12 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-13 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-14 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-15 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-16 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-17 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-18 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-19 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-20 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n[19 rows x 4 columns]\n",
  "history_begin_time" : 1654352628137,
  "history_end_time" : 1654352630624,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "rk6VnLnSmQsu",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\nsnotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\ndf = snotel_point.get_daily_data(\n    datetime(2020, 1, 2), datetime(2020, 1, 20),\n    [snotel_point.ALLOWED_VARIABLES.SWE]\n)\nprint(df)",
  "history_output" : "                                                                        geometry  ...  datasource\ndatetime                  site                                                    ...            \n2020-01-02 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-03 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-04 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-05 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-06 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-07 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-08 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-09 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-10 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-11 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-12 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-13 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-14 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-15 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-16 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-17 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-18 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-19 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n2020-01-20 08:00:00+00:00 713:CO:SNTL  POINT Z (-107.71389 37.89168 11080.00000)  ...        NRCS\n[19 rows x 4 columns]\n",
  "history_begin_time" : 1654290337491,
  "history_end_time" : 1654290340959,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "lIdSPYNQQx0T",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\nsnotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\ndf = snotel_point.get_daily_data(\n    datetime(2020, 1, 2), datetime(2020, 1, 20),\n    [snotel_point.ALLOWED_VARIABLES.SWE]\n)\nprint(df)",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/lIdSPYNQQx0T/data_snotel_real_time.py\", line 2, in <module>\n    from metloom.pointdata import SnotelPointData\nModuleNotFoundError: No module named 'metloom'\n",
  "history_begin_time" : 1654290321059,
  "history_end_time" : 1654290321135,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "PGQqshu1imog",
  "history_input" : "import os\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\n\nimport ulmo # this library has big trouble in Python 3.9\n\nsites = ulmo.cuahsi.wof.get_sites(wsdlurl)\n\n#Preview first item in dictionary\nprint(next(iter(sites.items())))\n\nsites_df = pd.DataFrame.from_dict(sites, orient='index').dropna()\nprint(sites_df.head())\n\nsites_df['geometry'] = [Point(float(loc['longitude']), float(loc['latitude'])) for loc in sites_df['location']]\n\nsites_df = sites_df.drop(columns='location')\nsites_df = sites_df.astype({\"elevation_m\":float})\n\nprint(sites_df.head())\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL'])\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL']['site_property'])\n\nsites_gdf_all = gpd.GeoDataFrame(sites_df, crs='EPSG:4326')\nprint(sites_gdf_all.head())\n\nprint(sites_gdf_all.shape)\n\n#geojson of state polygons\nstates_url = 'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_5m.json'\nstates_gdf = gpd.read_file(states_url)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_all.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\n#This prevents matplotlib from updating the axes extent (states polygons cover larger area than SNOTEL points)\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_gdf_conus = sites_gdf_all[~(sites_gdf_all.index.str.contains('AK'))]\n\nprint(sites_gdf_conus.shape)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_conus.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_fn = 'snotel_conus_sites.json'\nif not os.path.exists(sites_fn):\n    sites_gdf_conus.to_file(sites_fn, driver='GeoJSON')\n\n    ",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/PGQqshu1imog/data_snotel_real_time.py\", line 10, in <module>\n    import ulmo # this library has big trouble in Python 3.9\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/__init__.py\", line 9, in <module>\n    from . import cpc\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/__init__.py\", line 1, in <module>\n    from . import drought\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/drought/__init__.py\", line 8, in <module>\n    from .core import get_data\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/drought/core.py\", line 19, in <module>\n    from ulmo import util\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/util/__init__.py\", line 1, in <module>\n    from .misc import (\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/util/misc.py\", line 8, in <module>\n    import urlparse\nModuleNotFoundError: No module named 'urlparse'\n",
  "history_begin_time" : 1654289821663,
  "history_end_time" : 1654289824479,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "zZDxYhYoYJa0",
  "history_input" : "import os\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\nimport ulmo\n\nsites = ulmo.cuahsi.wof.get_sites(wsdlurl)\n\n#Preview first item in dictionary\nprint(next(iter(sites.items())))\n\nsites_df = pd.DataFrame.from_dict(sites, orient='index').dropna()\nprint(sites_df.head())\n\nsites_df['geometry'] = [Point(float(loc['longitude']), float(loc['latitude'])) for loc in sites_df['location']]\n\nsites_df = sites_df.drop(columns='location')\nsites_df = sites_df.astype({\"elevation_m\":float})\n\nprint(sites_df.head())\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL'])\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL']['site_property'])\n\nsites_gdf_all = gpd.GeoDataFrame(sites_df, crs='EPSG:4326')\nprint(sites_gdf_all.head())\n\nprint(sites_gdf_all.shape)\n\n#geojson of state polygons\nstates_url = 'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_5m.json'\nstates_gdf = gpd.read_file(states_url)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_all.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\n#This prevents matplotlib from updating the axes extent (states polygons cover larger area than SNOTEL points)\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_gdf_conus = sites_gdf_all[~(sites_gdf_all.index.str.contains('AK'))]\n\nprint(sites_gdf_conus.shape)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_conus.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_fn = 'snotel_conus_sites.json'\nif not os.path.exists(sites_fn):\n    sites_gdf_conus.to_file(sites_fn, driver='GeoJSON')",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/zZDxYhYoYJa0/data_snotel_real_time.py\", line 9, in <module>\n    import ulmo\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/__init__.py\", line 9, in <module>\n    from . import cpc\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/__init__.py\", line 1, in <module>\n    from . import drought\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/drought/__init__.py\", line 8, in <module>\n    from .core import get_data\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/cpc/drought/core.py\", line 19, in <module>\n    from ulmo import util\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/util/__init__.py\", line 1, in <module>\n    from .misc import (\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ulmo/util/misc.py\", line 8, in <module>\n    import urlparse\nModuleNotFoundError: No module named 'urlparse'\n",
  "history_begin_time" : 1653916164155,
  "history_end_time" : 1653916166101,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "z8rfe8YRjyRe",
  "history_input" : "import os\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\nimport ulmo\n\nsites = ulmo.cuahsi.wof.get_sites(wsdlurl)\n\n#Preview first item in dictionary\nprint(next(iter(sites.items())))\n\nsites_df = pd.DataFrame.from_dict(sites, orient='index').dropna()\nprint(sites_df.head())\n\nsites_df['geometry'] = [Point(float(loc['longitude']), float(loc['latitude'])) for loc in sites_df['location']]\n\nsites_df = sites_df.drop(columns='location')\nsites_df = sites_df.astype({\"elevation_m\":float})\n\nprint(sites_df.head())\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL'])\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL']['site_property'])\n\nsites_gdf_all = gpd.GeoDataFrame(sites_df, crs='EPSG:4326')\nprint(sites_gdf_all.head())\n\nprint(sites_gdf_all.shape)\n\n#geojson of state polygons\nstates_url = 'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_5m.json'\nstates_gdf = gpd.read_file(states_url)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_all.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\n#This prevents matplotlib from updating the axes extent (states polygons cover larger area than SNOTEL points)\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_gdf_conus = sites_gdf_all[~(sites_gdf_all.index.str.contains('AK'))]\n\nprint(sites_gdf_conus.shape)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_conus.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_fn = 'snotel_conus_sites.json'\nif not os.path.exists(sites_fn):\n    sites_gdf_conus.to_file(sites_fn, driver='GeoJSON')",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/z8rfe8YRjyRe/data_snotel_real_time.py\", line 9, in <module>\n    import ulmo\nModuleNotFoundError: No module named 'ulmo'\n",
  "history_begin_time" : 1653916136107,
  "history_end_time" : 1653916139031,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "NzcbQhlCCWbM",
  "history_input" : "import os\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\nimport ulmo\n\nsites = ulmo.cuahsi.wof.get_sites(wsdlurl)\n\n#Preview first item in dictionary\nprint(next(iter(sites.items())))\n\nsites_df = pd.DataFrame.from_dict(sites, orient='index').dropna()\nprint(sites_df.head())\n\nsites_df['geometry'] = [Point(float(loc['longitude']), float(loc['latitude'])) for loc in sites_df['location']]\n\nsites_df = sites_df.drop(columns='location')\nsites_df = sites_df.astype({\"elevation_m\":float})\n\nprint(sites_df.head())\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL'])\n\nprint(sites_df.loc['SNOTEL:301_CA_SNTL']['site_property'])\n\nsites_gdf_all = gpd.GeoDataFrame(sites_df, crs='EPSG:4326')\nprint(sites_gdf_all.head())\n\nprint(sites_gdf_all.shape)\n\n#geojson of state polygons\nstates_url = 'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_5m.json'\nstates_gdf = gpd.read_file(states_url)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_all.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\n#This prevents matplotlib from updating the axes extent (states polygons cover larger area than SNOTEL points)\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_gdf_conus = sites_gdf_all[~(sites_gdf_all.index.str.contains('AK'))]\n\nprint(sites_gdf_conus.shape)\n\nf, ax = plt.subplots(figsize=(10,6))\nsites_gdf_conus.plot(ax=ax, column='elevation_m', markersize=3, cmap='inferno', legend=True, legend_kwds={'label': \"Elevation (m)\"})\nax.autoscale(False)\nstates_gdf.plot(ax=ax, facecolor='none', edgecolor='k', alpha=0.3);\n\nsites_fn = 'snotel_conus_sites.json'\nif not os.path.exists(sites_fn):\n    sites_gdf_conus.to_file(sites_fn, driver='GeoJSON')",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/NzcbQhlCCWbM/data_snotel_real_time.py\", line 8, in <module>\n    import contextily as ctx\nModuleNotFoundError: No module named 'contextily'\n",
  "history_begin_time" : 1653916109409,
  "history_end_time" : 1653916111149,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : null,
  "indicator" : "Done"
},]
