[{
  "history_id" : "f83amz0ynwp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667434821996,
  "history_end_time" : 1667434821996,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dxgam5c03tu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667420912883,
  "history_end_time" : 1667420912883,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4zmf1ko8sps",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667420799805,
  "history_end_time" : 1667420799805,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9jsy5i2igjw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667412122216,
  "history_end_time" : 1667412122216,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hyuavopba11",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667411534156,
  "history_end_time" : 1667411534156,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s2g2vw6sa1v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667411146177,
  "history_end_time" : 1667411146177,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y8ypti41j6f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410736833,
  "history_end_time" : 1667410736833,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m9a3a2mzmnl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410696440,
  "history_end_time" : 1667410696440,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9vjzepawt9z",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\9vjzepawt9z\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410662021,
  "history_end_time" : 1667410690576,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "508t44jh67q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410652241,
  "history_end_time" : 1667410705878,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pn0s6e75con",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\pn0s6e75con\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410577031,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5x4yfodzk90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410544345,
  "history_end_time" : 1667410624028,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8ch0mlzqf2m",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\8ch0mlzqf2m\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410385816,
  "history_end_time" : 1667410556070,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zmezs3sdu3o",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1667409179861,
  "history_end_time" : 1667409179884,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "wpug7s7qm50",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1657574457123,
  "history_end_time" : 1657574458873,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "cwlk98tgia1",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-07-06\nC:\\Users\\BLi\n",
  "history_begin_time" : 1657137844878,
  "history_end_time" : 1657137847398,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yxdy7tkk32b",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656529473095,
  "history_end_time" : 1656529474851,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "n4m135naslz",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-29\nC:\\Users\\BLi\n",
  "history_begin_time" : 1656523437133,
  "history_end_time" : 1656523439473,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "e4b8tlf1c30",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\n",
  "history_begin_time" : 1656443784185,
  "history_end_time" : 1656443787197,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cFcJKLiTsLHN",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\cFcJKLiTsLHN\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\cFcJKLiTsLHN\\snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"C:\\Users\\BLi\\gw-workspace\\cFcJKLiTsLHN\\snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1656443481154,
  "history_end_time" : 1656443504620,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "a9g8tl4hkth",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\a9g8tl4hkth\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\a9g8tl4hkth\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656443344095,
  "history_end_time" : 1656443346316,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tdm18USXqiA6",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n2022-03-11 13:26:22\n",
  "history_begin_time" : 1656439652243,
  "history_end_time" : 1656439674271,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9es4lc60du9",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656439588638,
  "history_end_time" : 1656439589103,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "cjvxrxohpdr",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n2022-03-11 13:26:22\n",
  "history_begin_time" : 1656439446490,
  "history_end_time" : 1656439469069,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "di6ppb3imzm",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n2022-03-11 13:26:22\n",
  "history_begin_time" : 1656439254894,
  "history_end_time" : 1656439278457,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2nzw7jo24c3",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n2022-03-11 13:26:22\n",
  "history_begin_time" : 1656439111269,
  "history_end_time" : 1656439134791,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "H7cpJm3uJMCu",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n2022-03-11 13:26:22\n",
  "history_begin_time" : 1656439042757,
  "history_end_time" : 1656439065419,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "frp76FSVaC1C",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\ncreate_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\frp76FSVaC1C\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\frp76FSVaC1C\\snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"C:\\Users\\BLi\\gw-workspace\\frp76FSVaC1C\\snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1656438707411,
  "history_end_time" : 1656438729765,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "qBIIIdbO8iXF",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\qBIIIdbO8iXF\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\qBIIIdbO8iXF\\snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"C:\\Users\\BLi\\gw-workspace\\qBIIIdbO8iXF\\snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1656438606484,
  "history_end_time" : 1656438608580,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "9acewtCPwFEV",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\9acewtCPwFEV\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\9acewtCPwFEV\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656438555305,
  "history_end_time" : 1656438557666,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Kgdutt8s0BTJ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\Kgdutt8s0BTJ\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\Kgdutt8s0BTJ\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656438506079,
  "history_end_time" : 1656438508201,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "8NUvbDMswmDL",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\8NUvbDMswmDL\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\8NUvbDMswmDL\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656438465596,
  "history_end_time" : 1656438467776,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "nxm6c63tdt2",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656438433003,
  "history_end_time" : 1656438433875,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "i1ceuk08gxc",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\i1ceuk08gxc\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\i1ceuk08gxc\\snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"C:\\Users\\BLi\\gw-workspace\\i1ceuk08gxc\\snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1656438199361,
  "history_end_time" : 1656438201604,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "56e1ts4aq9n",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-28\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\56e1ts4aq9n\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\56e1ts4aq9n\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656437721014,
  "history_end_time" : 1656437724012,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "c1i70yqtpbr",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-27\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\c1i70yqtpbr\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\c1i70yqtpbr\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656362524325,
  "history_end_time" : 1656362526839,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "4jr5zj73h7u",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-27\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\4jr5zj73h7u\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\4jr5zj73h7u\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656361464116,
  "history_end_time" : 1656361466446,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "mxgg5equak9",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656361410828,
  "history_end_time" : 1656361412156,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ghh9cong0k6",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-06-27\nC:\\Users\\BLi\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\ghh9cong0k6\\snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"C:\\Users\\BLi\\gw-workspace\\ghh9cong0k6\\snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\BLi/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1656361410009,
  "history_end_time" : 1656361412152,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "kq3726r9rfx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656361165147,
  "history_end_time" : 1656361165943,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "wo7ga1g0idw",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\wo7ga1g0idw\\snowcast_utils.py\", line 9, in <module>\n    import geojson\nModuleNotFoundError: No module named 'geojson'\n",
  "history_begin_time" : 1656360838994,
  "history_end_time" : 1656360842017,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "rfy7dfk5in3",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656360781740,
  "history_end_time" : 1656360782407,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "y7j0syfr04a",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\y7j0syfr04a\\snowcast_utils.py\", line 9, in <module>\n    import geojson\nModuleNotFoundError: No module named 'geojson'\n",
  "history_begin_time" : 1656360758052,
  "history_end_time" : 1656360760741,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "vslozl9om48",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\vslozl9om48\\snowcast_utils.py\", line 5, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1656360650399,
  "history_end_time" : 1656360652158,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0ls1eb68s6q",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:142: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\0ls1eb68s6q\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.22.3\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1656360396020,
  "history_end_time" : 1656360396146,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "2egu4oms6pd",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656360353963,
  "history_end_time" : 1656360354026,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "68fgptd51b4",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:142: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\68fgptd51b4\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.22.3\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1656360286988,
  "history_end_time" : 1656360287119,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nyb0xvgwxav",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:142: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\nyb0xvgwxav\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.22.3\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1656360130961,
  "history_end_time" : 1656360131113,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "72enqir2yhu",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1656349573537,
  "history_end_time" : 1656349573629,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kr3aeui2g8x",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\kr3aeui2g8x\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\nModuleNotFoundError: No module named 'pandas'\n",
  "history_begin_time" : 1656349416636,
  "history_end_time" : 1656349416773,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "wmhmxphqvnf",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\wmhmxphqvnf\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\nModuleNotFoundError: No module named 'pandas'\n",
  "history_begin_time" : 1656348494820,
  "history_end_time" : 1656348495522,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "92zhsl3emq5",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\nModuleNotFoundError: No module named 'pandas'\n",
  "history_begin_time" : 1655310349926,
  "history_end_time" : 1655310350191,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "axq9mdvdenx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "\nprocess hasn't exited",
  "history_begin_time" : 1654519479884,
  "history_end_time" : 1654519480249,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "GjU6fOI3w1XI",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-03\n/Users/joe\n2022-04-25 06:00:00\n",
  "history_begin_time" : 1651626668215,
  "history_end_time" : 1651626673326,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "irKx20R4PWKo",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\n2022-04-24\n",
  "history_begin_time" : 1651419339840,
  "history_end_time" : 1651419351543,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hpSatvBfotyE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 83, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 64, in <lambda>\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2022-02-28' does not match format '%Y-%m-%d %H:%M:%S'\n",
  "history_begin_time" : 1651419321119,
  "history_end_time" : 1651419333101,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1hN6rchScBKY",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\n",
  "history_begin_time" : 1651419291108,
  "history_end_time" : 1651419302255,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JMhzM0uIidvE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n",
  "history_begin_time" : 1651418054504,
  "history_end_time" : 1651418064572,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Wgkx7b8QS0ZZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/Wgkx7b8QS0ZZ/snowcast_utils.py\", line 80, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nTypeError: findLastStopDate() takes 1 positional argument but 2 were given\n",
  "history_begin_time" : 1651418021348,
  "history_end_time" : 1651418023361,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qDzlJVntxdOh",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 80, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list)\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 64, in <lambda>\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  06:00:00\n",
  "history_begin_time" : 1651417927931,
  "history_end_time" : 1651417938757,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "O2NEe304o9wf",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n\n\n\n      \n",
  "history_output" : "Running",
  "history_begin_time" : 1651417367226,
  "history_end_time" : 1651417425098,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jUUoULdNaOzG",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-24\n",
  "history_begin_time" : 1651417197869,
  "history_end_time" : 1651417202467,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ln8fEPL0legX",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-03-05\n2022-02-24\n2022-04-15\n2022-03-24\n2022-03-22\n2022-03-17\n2022-04-24\n2022-04-04\n2022-03-08\n2022-04-19\n",
  "history_begin_time" : 1651416713964,
  "history_end_time" : 1651416717862,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "M9ect8nly5uc",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\n2022-03-05\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-23'], dtype='object')\n2022-02-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-08', '2022-04-09', '2022-04-10', '2022-04-11', '2022-04-12',\n       '2022-04-13', '2022-04-14', '2022-04-15'],\n      dtype='object')\n2022-04-15\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-02-23'],\n      dtype='object')\n2022-03-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-02-23'],\n      dtype='object')\n2022-03-22\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-02-23'],\n      dtype='object')\n2022-03-17\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-20', '2022-04-21', '2022-04-22', '2022-04-23', '2022-04-24'], dtype='object')\n2022-04-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-03-25', '2022-03-26', '2022-03-27',\n       '2022-03-28', '2022-03-29', '2022-03-30', '2022-03-31', '2022-04-01',\n       '2022-04-02', '2022-04-03', '2022-04-04', '2022-02-23'],\n      dtype='object')\n2022-04-04\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-03-07', '2022-03-08'], dtype='object')\n2022-03-08\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-18', '2022-04-19'], dtype='object')\n2022-04-19\n",
  "history_begin_time" : 1651416694659,
  "history_end_time" : 1651416699537,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EW2X10IWkuaQ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 76, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 71, in findLastStopDate\n    latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 71, in <lambda>\n    latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\nNameError: name 'datetime' is not defined\n",
  "history_begin_time" : 1651416673196,
  "history_end_time" : 1651416675334,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Ojm5L5juQpRT",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-23'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-08', '2022-04-09', '2022-04-10', '2022-04-11', '2022-04-12',\n       '2022-04-13', '2022-04-14', '2022-04-15'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-20', '2022-04-21', '2022-04-22', '2022-04-23', '2022-04-24'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-03-25', '2022-03-26', '2022-03-27',\n       '2022-03-28', '2022-03-29', '2022-03-30', '2022-03-31', '2022-04-01',\n       '2022-04-02', '2022-04-03', '2022-04-04', '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-03-07', '2022-03-08'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-18', '2022-04-19'], dtype='object')\n",
  "history_begin_time" : 1651416570185,
  "history_end_time" : 1651416575059,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EiuXQzQZEt4F",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.Index.unique)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/EiuXQzQZEt4F/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/EiuXQzQZEt4F/snowcast_utils.py\", line 70, in findLastStopDate\n    print(pdf.Index.unique)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 5487, in __getattr__\n    return object.__getattribute__(self, name)\nAttributeError: 'DataFrame' object has no attribute 'Index'\n",
  "history_begin_time" : 1651416502176,
  "history_end_time" : 1651416504597,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "14HXr93UV6yE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-02-28   NaN\n2022-03-01   NaN\n2022-03-02   NaN\n2022-03-03   NaN\n2022-03-04   NaN\n              ..\n2022-03-01   NaN\n2022-03-02   NaN\n2022-03-03   NaN\n2022-03-04   NaN\n2022-03-05   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-02-20   NaN\n2022-02-21   NaN\n2022-02-22   NaN\n2022-02-24   NaN\n2022-02-20   NaN\n              ..\n2022-02-20   NaN\n2022-02-21   NaN\n2022-02-22   NaN\n2022-02-23   NaN\n2022-02-24   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-08   NaN\n2022-04-09   NaN\n2022-04-10   NaN\n2022-04-11   NaN\n2022-04-12   NaN\n              ..\n2022-04-11   NaN\n2022-04-12   NaN\n2022-04-13   NaN\n2022-04-14   NaN\n2022-04-15   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-20   NaN\n2022-03-21   NaN\n2022-03-22   NaN\n2022-03-23   NaN\n2022-03-24   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-18   NaN\n2022-03-19   NaN\n2022-03-20   NaN\n2022-03-21   NaN\n2022-03-22   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-13   NaN\n2022-03-14   NaN\n2022-03-15   NaN\n2022-03-16   NaN\n2022-03-17   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-20   NaN\n2022-04-21   NaN\n2022-04-22   NaN\n2022-04-23   NaN\n2022-04-24   NaN\n              ..\n2022-04-20   NaN\n2022-04-21   NaN\n2022-04-22   NaN\n2022-04-23   NaN\n2022-04-24   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-31   NaN\n2022-04-01   NaN\n2022-04-02   NaN\n2022-04-03   NaN\n2022-04-04   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n              ..\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n              ..\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416362522,
  "history_end_time" : 1651416366278,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "dvziPT5uyLYr",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3361, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 76, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 108, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Unnamed: 0'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/dvziPT5uyLYr/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/dvziPT5uyLYr/snowcast_utils.py\", line 70, in findLastStopDate\n    print(pdf[\"Unnamed: 0\"])\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3458, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3363, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Unnamed: 0'\n",
  "history_begin_time" : 1651416353389,
  "history_end_time" : 1651416355114,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "urhfjBG2lRV5",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f, index=0)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/urhfjBG2lRV5/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/urhfjBG2lRV5/snowcast_utils.py\", line 68, in findLastStopDate\n    pdf = pd.read_csv(f, index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\nTypeError: read_csv() got an unexpected keyword argument 'index'\n",
  "history_begin_time" : 1651416274573,
  "history_end_time" : 1651416276346,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "NdP76rvFitxZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-02-28\n1       2022-03-01\n2       2022-03-02\n3       2022-03-03\n4       2022-03-04\n           ...    \n4195    2022-03-01\n4196    2022-03-02\n4197    2022-03-03\n4198    2022-03-04\n4199    2022-03-05\nName: Unnamed: 0, Length: 4200, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-02-20\n1       2022-02-21\n2       2022-02-22\n3       2022-02-24\n4       2022-02-20\n           ...    \n2803    2022-02-20\n2804    2022-02-21\n2805    2022-02-22\n2806    2022-02-23\n2807    2022-02-24\nName: Unnamed: 0, Length: 2808, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-04-08\n1         2022-04-09\n2         2022-04-10\n3         2022-04-11\n4         2022-04-12\n             ...    \n155666    2022-04-11\n155667    2022-04-12\n155668    2022-04-13\n155669    2022-04-14\n155670    2022-04-15\nName: Unnamed: 0, Length: 155671, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-01-01\n1         2022-01-02\n2         2022-01-03\n3         2022-01-04\n4         2022-01-05\n             ...    \n276979    2022-03-20\n276980    2022-03-21\n276981    2022-03-22\n276982    2022-03-23\n276983    2022-03-24\nName: Unnamed: 0, Length: 276984, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-01-01\n1         2022-01-02\n2         2022-01-03\n3         2022-01-04\n4         2022-01-05\n             ...    \n725246    2022-03-18\n725247    2022-03-19\n725248    2022-03-20\n725249    2022-03-21\n725250    2022-03-22\nName: Unnamed: 0, Length: 725251, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        2022-01-01\n1        2022-01-02\n2        2022-01-03\n3        2022-01-04\n4        2022-01-05\n            ...    \n52494    2022-03-13\n52495    2022-03-14\n52496    2022-03-15\n52497    2022-03-16\n52498    2022-03-17\nName: Unnamed: 0, Length: 52499, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-04-20\n1         2022-04-21\n2         2022-04-22\n3         2022-04-23\n4         2022-04-24\n             ...    \n103778    2022-04-20\n103779    2022-04-21\n103780    2022-04-22\n103781    2022-04-23\n103782    2022-04-24\nName: Unnamed: 0, Length: 103783, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0          2022-01-01\n1          2022-01-02\n2          2022-01-03\n3          2022-01-04\n4          2022-01-05\n              ...    \n1930446    2022-03-31\n1930447    2022-04-01\n1930448    2022-04-02\n1930449    2022-04-03\n1930450    2022-04-04\nName: Unnamed: 0, Length: 1930451, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-03-07\n1       2022-03-08\n2       2022-03-07\n3       2022-03-08\n4       2022-03-07\n           ...    \n1395    2022-03-08\n1396    2022-03-07\n1397    2022-03-08\n1398    2022-03-07\n1399    2022-03-08\nName: Unnamed: 0, Length: 1400, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        2022-04-18\n1        2022-04-19\n2        2022-04-18\n3        2022-04-19\n4        2022-04-18\n            ...    \n41509    2022-04-19\n41510    2022-04-18\n41511    2022-04-19\n41512    2022-04-18\n41513    2022-04-19\nName: Unnamed: 0, Length: 41514, dtype: object\n",
  "history_begin_time" : 1651416252722,
  "history_end_time" : 1651416256161,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3Ef9C4ozYWZp",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf.date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416226689,
  "history_end_time" : 1651416230137,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XKsh7PHbZL79",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416196699,
  "history_end_time" : 1651416200579,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "csRbfuz0ABAw",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns())\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/csRbfuz0ABAw/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/csRbfuz0ABAw/snowcast_utils.py\", line 69, in findLastStopDate\n    print(pdf.columns())\nTypeError: 'Index' object is not callable\n",
  "history_begin_time" : 1651416177246,
  "history_end_time" : 1651416178964,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TFJwfjBKkJJ8",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.head())\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-28   NaN  ...  41.993149 -120.178715\n1  2022-03-01   NaN  ...  41.993149 -120.178715\n2  2022-03-02   NaN  ...  41.993149 -120.178715\n3  2022-03-03   NaN  ...  41.993149 -120.178715\n4  2022-03-04   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-20   NaN  ...  41.993149 -120.178715\n1  2022-02-21   NaN  ...  41.993149 -120.178715\n2  2022-02-22   NaN  ...  41.993149 -120.178715\n3  2022-02-24   NaN  ...  41.993149 -120.178715\n4  2022-02-20   NaN  ...  37.727154 -119.136669\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-08   NaN  ...  43.51019 -109.318084\n1  2022-04-09   NaN  ...  43.51019 -109.318084\n2  2022-04-10   NaN  ...  43.51019 -109.318084\n3  2022-04-11   NaN  ...  43.51019 -109.318084\n4  2022-04-12   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.435274 -119.325316\n1  2022-01-02   NaN  ...  37.435274 -119.325316\n2  2022-01-03   NaN  ...  37.435274 -119.325316\n3  2022-01-04   NaN  ...  37.435274 -119.325316\n4  2022-01-05   NaN  ...  37.435274 -119.325316\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.027591 -119.406165\n1  2022-01-02   NaN  ...  37.027591 -119.406165\n2  2022-01-03   NaN  ...  37.027591 -119.406165\n3  2022-01-04   NaN  ...  37.027591 -119.406165\n4  2022-01-05   NaN  ...  37.027591 -119.406165\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  41.993149 -120.178715\n1  2022-01-02   NaN  ...  41.993149 -120.178715\n2  2022-01-03   NaN  ...  41.993149 -120.178715\n3  2022-01-04   NaN  ...  41.993149 -120.178715\n4  2022-01-05   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-20   NaN  ...  43.51019 -109.318084\n1  2022-04-21   NaN  ...  43.51019 -109.318084\n2  2022-04-22   NaN  ...  43.51019 -109.318084\n3  2022-04-23   NaN  ...  43.51019 -109.318084\n4  2022-04-24   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-01-01   NaN  ...  43.51019 -109.318084\n1  2022-01-02   NaN  ...  43.51019 -109.318084\n2  2022-01-03   NaN  ...  43.51019 -109.318084\n3  2022-01-04   NaN  ...  43.51019 -109.318084\n4  2022-01-05   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-03-07   NaN  ...  41.993149 -120.178715\n1  2022-03-08   NaN  ...  41.993149 -120.178715\n2  2022-03-07   NaN  ...  37.727154 -119.136669\n3  2022-03-08   NaN  ...  37.727154 -119.136669\n4  2022-03-07   NaN  ...  38.918144 -120.205665\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-04-18   NaN  ...  43.510190 -109.318084\n1  2022-04-19   NaN  ...  43.510190 -109.318084\n2  2022-04-18   NaN  ...  40.329588 -105.949401\n3  2022-04-19   NaN  ...  40.329588 -105.949401\n4  2022-04-18   NaN  ...  37.734259 -119.738541\n[5 rows x 6 columns]\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416159688,
  "history_end_time" : 1651416163132,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7MbxKQStEhIY",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416143939,
  "history_end_time" : 1651416147900,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "DxxnG1dt3Amk",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf[\"date\"].unique())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n[nan]\n",
  "history_begin_time" : 1651416064245,
  "history_end_time" : 1651416067651,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "tQj12VZ6rPET",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.head())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-28   NaN  ...  41.993149 -120.178715\n1  2022-03-01   NaN  ...  41.993149 -120.178715\n2  2022-03-02   NaN  ...  41.993149 -120.178715\n3  2022-03-03   NaN  ...  41.993149 -120.178715\n4  2022-03-04   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-20   NaN  ...  41.993149 -120.178715\n1  2022-02-21   NaN  ...  41.993149 -120.178715\n2  2022-02-22   NaN  ...  41.993149 -120.178715\n3  2022-02-24   NaN  ...  41.993149 -120.178715\n4  2022-02-20   NaN  ...  37.727154 -119.136669\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-08   NaN  ...  43.51019 -109.318084\n1  2022-04-09   NaN  ...  43.51019 -109.318084\n2  2022-04-10   NaN  ...  43.51019 -109.318084\n3  2022-04-11   NaN  ...  43.51019 -109.318084\n4  2022-04-12   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.435274 -119.325316\n1  2022-01-02   NaN  ...  37.435274 -119.325316\n2  2022-01-03   NaN  ...  37.435274 -119.325316\n3  2022-01-04   NaN  ...  37.435274 -119.325316\n4  2022-01-05   NaN  ...  37.435274 -119.325316\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.027591 -119.406165\n1  2022-01-02   NaN  ...  37.027591 -119.406165\n2  2022-01-03   NaN  ...  37.027591 -119.406165\n3  2022-01-04   NaN  ...  37.027591 -119.406165\n4  2022-01-05   NaN  ...  37.027591 -119.406165\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  41.993149 -120.178715\n1  2022-01-02   NaN  ...  41.993149 -120.178715\n2  2022-01-03   NaN  ...  41.993149 -120.178715\n3  2022-01-04   NaN  ...  41.993149 -120.178715\n4  2022-01-05   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-20   NaN  ...  43.51019 -109.318084\n1  2022-04-21   NaN  ...  43.51019 -109.318084\n2  2022-04-22   NaN  ...  43.51019 -109.318084\n3  2022-04-23   NaN  ...  43.51019 -109.318084\n4  2022-04-24   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-01-01   NaN  ...  43.51019 -109.318084\n1  2022-01-02   NaN  ...  43.51019 -109.318084\n2  2022-01-03   NaN  ...  43.51019 -109.318084\n3  2022-01-04   NaN  ...  43.51019 -109.318084\n4  2022-01-05   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-03-07   NaN  ...  41.993149 -120.178715\n1  2022-03-08   NaN  ...  41.993149 -120.178715\n2  2022-03-07   NaN  ...  37.727154 -119.136669\n3  2022-03-08   NaN  ...  37.727154 -119.136669\n4  2022-03-07   NaN  ...  38.918144 -120.205665\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-04-18   NaN  ...  43.510190 -109.318084\n1  2022-04-19   NaN  ...  43.510190 -109.318084\n2  2022-04-18   NaN  ...  40.329588 -105.949401\n3  2022-04-19   NaN  ...  40.329588 -105.949401\n4  2022-04-18   NaN  ...  37.734259 -119.738541\n[5 rows x 6 columns]\n",
  "history_begin_time" : 1651416020092,
  "history_end_time" : 1651416023952,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "MuCZMR5NcJph",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLatestDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n  \n\n#create_cell_location_csv()\nfindLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n",
  "history_begin_time" : 1651415521105,
  "history_end_time" : 1651415522973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uxbEvo2WF7AB",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLatestDate(target_testing_dir):\n  for filename in os.listdir(directory):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n  \n\n#create_cell_location_csv()\nfindLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/uxbEvo2WF7AB/snowcast_utils.py\", line 71, in <module>\n    findLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/uxbEvo2WF7AB/snowcast_utils.py\", line 63, in findLatestDate\n    for filename in os.listdir(directory):\nNameError: name 'directory' is not defined\n",
  "history_begin_time" : 1651415509322,
  "history_end_time" : 1651415512651,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "zBU7qz4AHcfT",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-04-08\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1649393823982,
  "history_end_time" : 1649393850505,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6BXc6mLb054T",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1648182532492,
  "history_end_time" : 1648182555046,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "83tQbqPnMArQ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1648182500877,
  "history_end_time" : 1648182526430,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yYiqGSLYmzeF",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  grid_coords_np = grid_coords_df.to_numpy()\n  print(grid_coords_np.shape)\n  #grid_coords_df.to_csv(all_cell_coords_file)\n  np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n(18130, 3)\n(18130, 3)\n",
  "history_begin_time" : 1648182445766,
  "history_end_time" : 1648182468440,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CsS7MlOL6D0V",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n(18130, 3)\n",
  "history_begin_time" : 1648182212426,
  "history_end_time" : 1648182235238,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Ey10AON9drua",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/Ey10AON9drua/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/Ey10AON9drua/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648182053774,
  "history_end_time" : 1648182055632,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p65mipoFC3In",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=\"cell_id\")\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/p65mipoFC3In/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/p65mipoFC3In/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=\"cell_id\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 'cell_id' was passed\n",
  "history_begin_time" : 1648182046047,
  "history_end_time" : 1648182048332,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AW5I1GxfbE04",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/AW5I1GxfbE04/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/AW5I1GxfbE04/snowcast_utils.py\", line 55, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648182029170,
  "history_end_time" : 1648182031756,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6lVpHMwBexFx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/6lVpHMwBexFx/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/6lVpHMwBexFx/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648182018101,
  "history_end_time" : 1648182020531,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "VJSCmSsbVrH6",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=[\"cell_id\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n        cell_id  lat  lon\ncell_id     NaN  NaN  NaN\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/VJSCmSsbVrH6/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/VJSCmSsbVrH6/snowcast_utils.py\", line 55, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648181986656,
  "history_end_time" : 1648181989574,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "KRa5iDvytPvZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=[\"cell_id\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/KRa5iDvytPvZ/snowcast_utils.py\", line 60, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/KRa5iDvytPvZ/snowcast_utils.py\", line 54, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648181919842,
  "history_end_time" : 1648181922600,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "YRloIEzZ5hTP",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/YRloIEzZ5hTP/snowcast_utils.py\", line 60, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/YRloIEzZ5hTP/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648181893436,
  "history_end_time" : 1648181895973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "brjhpuiR7ESK",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n(18130, 3)\n",
  "history_begin_time" : 1648181666286,
  "history_end_time" : 1648181689157,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nGIkDypxzacA",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape())\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/nGIkDypxzacA/snowcast_utils.py\", line 59, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/nGIkDypxzacA/snowcast_utils.py\", line 55, in create_cell_location_csv\n    print(grid_coords_df.shape())\nTypeError: 'tuple' object is not callable\n",
  "history_begin_time" : 1648181466700,
  "history_end_time" : 1648181488966,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "awzS76BDLd7U",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape())\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n",
  "history_begin_time" : 1648181426137,
  "history_end_time" : 1648181428661,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},]
