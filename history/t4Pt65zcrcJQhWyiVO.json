[{
  "history_id" : "yqep7ubmpsn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575659,
  "history_end_time" : 1667410651118,
  "history_notes" : null,
  "history_process" : "78vedq",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yicd4hdnfci",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575660,
  "history_end_time" : 1667410651119,
  "history_notes" : null,
  "history_process" : "mxpyqt",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2styza4iuuy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575660,
  "history_end_time" : 1667410651119,
  "history_notes" : null,
  "history_process" : "c2xkhz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ae203v9thn5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575661,
  "history_end_time" : 1667410651119,
  "history_notes" : null,
  "history_process" : "rauqsh",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3dh9uarlepc",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651119,
  "history_notes" : null,
  "history_process" : "mi3e5n",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "iu241x46z21",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651121,
  "history_notes" : null,
  "history_process" : "u7xh2p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rjckmke9x7m",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651121,
  "history_notes" : null,
  "history_process" : "2wkl6e",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cdyh61bjc7v",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651122,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cicgcw0q3ea",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651123,
  "history_notes" : null,
  "history_process" : "e8k4wq",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jyii9mk3g5f",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651123,
  "history_notes" : null,
  "history_process" : "h1qp9v",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7nuo8nn0ixn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575671,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "urd0nk",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jm2zvccgzm9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575672,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "525l8q",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o2tpnnd7rro",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575672,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "7temiv",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tmdmjk6r5xh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575673,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "rmxece",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cs2r4z2z13o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575674,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "858midm29of",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575675,
  "history_end_time" : 1667410651124,
  "history_notes" : null,
  "history_process" : "sjs5by",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6lv6q7oaznb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575676,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "y7nb46",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tprrrhfncjl",
  "history_input" : "\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\nexit() # uncomment to download new files\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\n# read grid cell\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\n#org_name = 'modis'\n#product_name = f'MODIS/006/MOD10A1'\n#var_name = 'NDSI'\n#column_name = 'mod10a1_ndsi'\n\norg_name = 'gridmet'\nproduct_name = 'IDAHO_EPSCOR/GRIDMET'\nstart_date = '2013-01-01'\nend_date = '2021-12-31'\n\nvar_list = ['tmmn', 'tmmx', 'pr', 'vpd', 'eto', 'rmax', 'rmin', 'vs']\n\nfor var in var_list:\n\n    var_name = var\n    column_name = var\n\n    dfolder = f\"{homedir}/Documents/GitHub/SnowCast/data/sim_training/{org_name}/\"\n    if not os.path.exists(dfolder):\n        os.makedirs(dfolder)\n\n    all_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\n    for ind in station_cell_mapper_df.index:\n\n        try:\n\n          current_cell_id = station_cell_mapper_df['cell_id'][ind]\n          print(\"collecting \", current_cell_id)\n          single_csv_file = f\"{dfolder}/{column_name}_{current_cell_id}.csv\"\n\n          if os.path.exists(single_csv_file):\n              print(\"exists skipping..\")\n              continue\n\n          longitude = station_cell_mapper_df['lon'][ind]\n          latitude = station_cell_mapper_df['lat'][ind]\n\n          # identify a 500 meter buffer around our Point Of Interest (POI)\n          poi = ee.Geometry.Point(longitude, latitude).buffer(1000)\n          viirs = ee.ImageCollection(product_name).filterDate(start_date, end_date).filterBounds(poi).select(var_name)\n\n          def poi_mean(img):\n              reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=1000)\n              mean = reducer.get(var_name)\n              return img.set('date', img.date().format()).set(column_name,mean)\n\n\n          poi_reduced_imgs = viirs.map(poi_mean)\n\n          nested_list = poi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n\n          # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n          df = pd.DataFrame(nested_list.getInfo(), columns=['date',column_name])\n\n          df['date'] = pd.to_datetime(df['date'])\n          df = df.set_index('date')\n\n          df['cell_id'] = current_cell_id\n          df['latitude'] = latitude\n          df['longitude'] = longitude\n          df.to_csv(single_csv_file)\n\n          df_list = [all_cell_df, df]\n          all_cell_df = pd.concat(df_list) # merge into big dataframe\n\n        except Exception as e:\n\n          print(e)\n          pass\n    \n    all_cell_df.to_csv(f\"{dfolder}/{column_name}.csv\")  \n\n\n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\tprrrhfncjl\\data_gee_gridmet_station_only.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410575926,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "a8p3n7",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vo8v20mqgq3",
  "history_input" : "\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\n# exit() # uncomment to download new files\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\n# read grid cell\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_pd = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\nprint(submission_format_df.shape)\n\n#org_name = 'modis'\n#product_name = f'MODIS/006/MOD10A1'\n#var_name = 'NDSI'\n#column_name = 'mod10a1_ndsi'\n\norg_name = 'gridmet'\nproduct_name = 'IDAHO_EPSCOR/GRIDMET'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sim_testing/{org_name}/\", \"%Y-%m-%d %H:%M:%S\")\nend_date = test_end_date\n#start_date = \"2022-04-06\"\n#end_date = \"2022-04-18\"\n\nvar_list = ['tmmn', 'tmmx', 'pr', 'vpd', 'eto', 'rmax', 'rmin', 'vs']\n\n\ndfolder = f\"{homedir}/Documents/GitHub/SnowCast/data/sim_testing/{org_name}/\"\nif not os.path.exists(dfolder):\n  os.makedirs(dfolder)\n  \ncolumn_list = ['date', 'cell_id', 'latitude', 'longitude']\ncolumn_list.extend(var_list)\nreduced_column_list = ['date']\nreduced_column_list.extend(var_list)\n\nall_cell_df = pd.DataFrame(columns = column_list)\n\ncount = 0\n\nfor current_cell_id in submission_format_df.index:\n\n  try:\n    count+=1\n    print(f\"=> Collected GridMet data for {count} cells\")\n    print(\"collecting \", current_cell_id)\n    #single_csv_file = f\"{dfolder}/{column_name}_{current_cell_id}.csv\"\n\n    #if os.path.exists(single_csv_file):\n    #  os.remove(single_csv_file)\n    #  print(\"exists skipping..\")\n    #  continue\n\n    longitude = all_cell_coords_pd['lon'][current_cell_id]\n    latitude = all_cell_coords_pd['lat'][current_cell_id]\n\n    # identify a 500 meter buffer around our Point Of Interest (POI)\n    poi = ee.Geometry.Point(longitude, latitude).buffer(1000)\n    viirs = ee.ImageCollection(product_name).filterDate(start_date, end_date).filterBounds(poi).select(var_list)\n\n    def poi_mean(img):\n      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=1000)\n      img = img.set('date', img.date().format());\n      for var in var_list:\n        column_name = var\n        mean = reducer.get(column_name)\n        img = img.set(column_name,mean)\n      return img\n\n\n    poi_reduced_imgs = viirs.map(poi_mean)\n\n    nested_list = poi_reduced_imgs.reduceColumns(ee.Reducer.toList(9), reduced_column_list).values().get(0)\n\n    # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n    df = pd.DataFrame(nested_list.getInfo(), columns=reduced_column_list)\n\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.set_index('date')\n\n    df['cell_id'] = current_cell_id\n    df['latitude'] = latitude\n    df['longitude'] = longitude\n    #df.to_csv(single_csv_file)\n\n    #print(df.head())\n    \n    df_list = [all_cell_df, df]\n    all_cell_df = pd.concat(df_list) # merge into big dataframe\n    \n    #if count % 4 == 0:\n\n  except Exception as e:\n    print(traceback.format_exc())\n    print(\"Failed: \", e)\n    pass\n\nall_cell_df.to_csv(f\"{dfolder}/all_vars_{start_date}_{end_date}.csv\")  \n\n\n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\vo8v20mqgq3\\data_gee_gridmet_real_time.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410577695,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "smsdr0",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fwb0dkrs950",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575681,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "4i0sop",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "iw3qtsvi9e1",
  "history_input" : "# Integrate all the datasets into one training dataset\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nfrom datetime import datetime as dt\n\nfrom datetime import date\nfrom snowcast_utils import *\n\npd.set_option('display.max_columns', None)\n\ntoday = date.today()\n\n# dd/mm/YY\nstart_date = \"2022-01-01\"\n#end_date = today.strftime(\"%Y-%m-%d\")\nend_date = findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nprint(\"d1 =\", end_date)\n\nprint(\"integrating datasets into one dataset\")\n#pd.set_option('display.max_columns', None)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\ngridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\nmodel_dir = f\"{github_dir}/model/\"\ntraining_feature_file = f\"{github_dir}/data/snowcast_provided/ground_measures_train_features.csv\"\ntesting_feature_file = f\"{github_dir}/data/snowcast_provided/ground_measures_test_features.csv\"\ntrain_labels_file = f\"{github_dir}/data/snowcast_provided/train_labels.csv\"\nground_measure_metadata_file = f\"{github_dir}/data/snowcast_provided/ground_measures_metadata.csv\"\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\n\n#example_mod_file = f\"{github_dir}/data/modis/mod10a1_ndsi_f191fe19-0e81-4bc9-9980-29738a05a49b.csv\"\n\n\ntraining_feature_pd = pd.read_csv(training_feature_file, header=0, index_col=0)\ntesting_feature_pd = pd.read_csv(testing_feature_file, header=0, index_col=0)\ntrain_labels_pd = pd.read_csv(train_labels_file, header=0, index_col=0)\nsubmission_format_pd = pd.read_csv(submission_format_file, header=0, index_col=0)\n#print(training_feature_pd.head())\n\nstation_cell_mapper_pd = pd.read_csv(station_cell_mapper_file, header=0, index_col=0)\n#print(station_cell_mapper_pd.head())\n\n#example_mod_pd = pd.read_csv(example_mod_file, header=0, index_col=0)\n#print(example_mod_pd.shape)\ndef getDateStr(x):\n  return x.split(\" \")[0]\n\ndef integrate_modis():\n  \"\"\"\n  Integrate all MODIS data into mod_all.csv. Traverse all the csv files in the sat_testing/modis folder\n  and aggregate them into one file with good headers.\n  \"\"\"\n  all_mod_file = f\"{github_dir}/data/ready_for_testing/modis_all.csv\"\n  ready_mod_file = f\"{github_dir}/data/sat_testing/modis/mod10a1_ndsi_{start_date}_{end_date}.csv\"\n  mod_testing_folder = f\"{github_dir}/data/sat_testing/modis/\"\n  if os.path.exists(all_mod_file):\n    os.remove(all_mod_file)\n    \n  new_modis_pd = None\n  \n  for filename in os.listdir(mod_testing_folder):\n    f = os.path.join(mod_testing_folder, filename)\n    if os.path.isfile(f) and \".csv\" in f:\n      print(f)\n      old_modis_pd = pd.read_csv(f, header = 0)\n      old_modis_pd = old_modis_pd.drop(columns=['date'])\n      old_modis_pd.rename(columns = {'Unnamed: 0':'date'}, inplace = True)\n      #cell_id_list = old_modis_pd[\"cell_id\"].unique()\n      #cell_id_list = np.insert(cell_id_list, 0, \"data\")\n      cell_id_list = submission_format_pd.index\n      date_list = pd.date_range(start=start_date, end=end_date, freq='D').astype(str)\n\n      rows = date_list\n      cols = cell_id_list\n      \n      if new_modis_pd is None:\n        new_modis_pd = pd.DataFrame(([0.0 for col in cols] for row in rows), index=rows, columns=cols)\n      \n      for i, row in old_modis_pd.iterrows():\n        cdate = row['date']\n        ndsi = row['mod10a1_ndsi']\n        cellid = row['cell_id']\n        #print(f\"{cdate} - {ndsi} - {cellid}\")\n        if ndsi != 0:\n           new_modis_pd.at[cdate, cellid] = ndsi\n  \n  #modis_np = numpy.zeros((len(date_list), len(cell_id_list)+1))\n  #modis_np[0] = cell_id_list\n  \n  #s1_pd.loc[:, ~s1_pd.columns.str.match('Unnamed')]\n  #print(new_modis_pd.head())\n  new_modis_pd.to_csv(all_mod_file)\n\n  \ndef integrate_sentinel1():\n  \"\"\"\n  Integrate all Sentinel 1 data into sentinel1_all.csv\n  Turn the rows into \"daily\", right now it has datetime stamps.\n  \"\"\"\n  all_sentinel1_file = f\"{github_dir}/data/ready_for_testing/sentinel1_all.csv\"\n  ready_sentinel1_file = f\"{github_dir}/data/sat_testing/sentinel1/\"\n  if os.path.exists(all_sentinel1_file):\n    os.remove(all_sentinel1_file)\n  new_s1_pd = None\n  for filename in os.listdir(ready_sentinel1_file):\n    f = os.path.join(ready_sentinel1_file, filename)\n    if os.path.isfile(f) and \".csv\" in f:\n      print(f)\n      old_s1_pd = pd.read_csv(f, header = 0)\n      old_s1_pd = old_s1_pd.drop(columns=['date'])\n      old_s1_pd.rename(columns = {'Unnamed: 0':'date'}, inplace = True)\n      #s1_pd.loc[:, ~s1_pd.columns.str.match('Unnamed')]\n\n      #cell_id_list = old_s1_pd[\"cell_id\"].unique()\n      cell_id_list = submission_format_pd.index\n      #date_list = old_s1_pd[\"date\"].unique()\n      date_list = pd.date_range(start=start_date, end=end_date, freq='D').astype(str)\n      rows = date_list\n      cols = cell_id_list\n      \n      if new_s1_pd is None:\n        new_s1_pd = pd.DataFrame(([0.0 for col in cols] for row in rows), index=rows, columns=cols)\n\n      for i, row in old_s1_pd.iterrows():\n        cdate = row['date']\n        xdate = dt.strptime(cdate, \"%Y-%m-%d %H:%M:%S\") #3/7/2022  2:00:48 AM\n        sdate = xdate.strftime(\"%Y-%m-%d\")\n        grd = row['s1_grd_vv']\n        cellid = row['cell_id']\n        if grd == 0:\n          continue\n        new_s1_pd.at[sdate, cellid] = float(grd)\n  \n  new_s1_pd.to_csv(all_sentinel1_file)\n\ndef integrate_gridmet():\n  \"\"\"\n  Integrate all gridMET data into gridmet_all.csv\n  \"\"\"\n  \n  dates = pd.date_range(start=start_date, end=end_date, freq='D').astype(str)\n  \n  #print(mod_all_df.head())\n  var_list = ['tmmn', 'tmmx', 'pr', 'vpd', 'eto', 'rmax', 'rmin', 'vs']\n  \n  for var in var_list:\n    print(\"Processing \", var)\n    all_single_var_file = f\"{github_dir}/data/ready_for_testing/gridmet_{var}_all.csv\"\n    \n    all_gridmet_var_folder = f\"{github_dir}/data/sim_testing/gridmet/\"\n    new_var_pd = None\n    \n    for filename in os.listdir(all_gridmet_var_folder):\n      f = os.path.join(all_gridmet_var_folder, filename)\n      if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        all_gridmet_var_pd = pd.read_csv(f, header=0)\n        #cell_id_list = old_s1_pd[\"cell_id\"].unique()\n        cell_id_list = submission_format_pd.index\n        #date_list = old_s1_pd[\"date\"].unique()\n        date_list = pd.date_range(start=start_date, end=end_date, freq='D').astype(str)\n        rows = date_list\n        cols = cell_id_list\n        if new_var_pd is None:\n          new_var_pd = pd.DataFrame(([0.0 for col in cols] for row in rows), index=rows, columns=cols)\n\n        for i, row in all_gridmet_var_pd.iterrows():\n          cdate = row[\"Unnamed: 0\"]\n          xdate = dt.strptime(cdate, \"%Y-%m-%d %H:%M:%S\") #3/7/2022  2:00:48 AM\n          sdate = xdate.strftime(\"%Y-%m-%d\")\n          newval = row[var]\n          cellid = row['cell_id']\n          if newval != 0:\n            new_var_pd.at[sdate, cellid] = float(newval)\n  \n    new_var_pd.to_csv(all_single_var_file)\n  \n  \ndef prepare_testing_csv():\n  \"\"\"\n  MOD model:\n    input columns: [m, doy, ndsi]\n    output column: [swe]\n  Sentinel1 model:\n    input columns: [m, doy, grd]\n    output column: [swe]\n  gridMET model:\n    input columns: [m, doy, tmmn, tmmx, pr, vpd, eto, rmax, rmin, vs]\n    output column: [swe]\n  \"\"\"\n  all_ready_file = f\"{github_dir}/data/ready_for_testing/all_ready_3.csv\"\n  if os.path.exists(all_ready_file):\n    os.remove(all_ready_file)\n  \n  all_mod_file = f\"{github_dir}/data/ready_for_testing/modis_all.csv\"\n  modis_all_pd = pd.read_csv(all_mod_file, header=0, index_col = 0)\n  modis_all_np = modis_all_pd.to_numpy()\n  \n  all_sentinel1_file = f\"{github_dir}/data/ready_for_testing/sentinel1_all.csv\"\n  sentinel1_all_pd = pd.read_csv(all_sentinel1_file, header=0, index_col = 0)\n  sentinel1_all_np = sentinel1_all_pd.to_numpy()\n  \n  all_gridmet_eto_file = f\"{github_dir}/data/ready_for_testing/gridmet_eto_all.csv\"\n  gridmet_eto_all_pd = pd.read_csv(all_gridmet_eto_file, header=0, index_col = 0)\n  gridmet_eto_all_np = gridmet_eto_all_pd.to_numpy()\n  \n  all_gridmet_pr_file = f\"{github_dir}/data/ready_for_testing/gridmet_pr_all.csv\"\n  gridmet_pr_all_pd = pd.read_csv(all_gridmet_pr_file, header=0, index_col = 0)\n  gridmet_pr_all_np = gridmet_pr_all_pd.to_numpy()\n  \n  all_gridmet_rmax_file = f\"{github_dir}/data/ready_for_testing/gridmet_rmax_all.csv\"\n  gridmet_rmax_all_pd = pd.read_csv(all_gridmet_rmax_file, header=0, index_col = 0)\n  gridmet_rmax_all_np = gridmet_rmax_all_pd.to_numpy()\n  \n  all_gridmet_rmin_file = f\"{github_dir}/data/ready_for_testing/gridmet_rmin_all.csv\"\n  gridmet_rmin_all_pd = pd.read_csv(all_gridmet_rmin_file, header=0, index_col = 0)\n  gridmet_rmin_all_np = gridmet_rmin_all_pd.to_numpy()\n  \n  all_gridmet_tmmn_file = f\"{github_dir}/data/ready_for_testing/gridmet_tmmn_all.csv\"\n  gridmet_tmmn_all_pd = pd.read_csv(all_gridmet_tmmn_file, header=0, index_col = 0)\n  gridmet_tmmn_all_np = gridmet_tmmn_all_pd.to_numpy()\n  \n  all_gridmet_tmmx_file = f\"{github_dir}/data/ready_for_testing/gridmet_tmmx_all.csv\"\n  gridmet_tmmx_all_pd = pd.read_csv(all_gridmet_tmmx_file, header=0, index_col = 0)\n  gridmet_tmmx_all_np = gridmet_tmmx_all_pd.to_numpy()\n  \n  all_gridmet_vpd_file = f\"{github_dir}/data/ready_for_testing/gridmet_vpd_all.csv\"\n  gridmet_vpd_all_pd = pd.read_csv(all_gridmet_vpd_file, header=0, index_col = 0)\n  gridmet_vpd_all_np = gridmet_vpd_all_pd.to_numpy()\n  \n  all_gridmet_vs_file = f\"{github_dir}/data/ready_for_testing/gridmet_vs_all.csv\"\n  gridmet_vs_all_pd = pd.read_csv(all_gridmet_vs_file, header=0, index_col = 0)\n  gridmet_vs_all_np = gridmet_vs_all_pd.to_numpy()\n  \n  grid_terrain_file = f\"{github_dir}/data/terrain/gridcells_eval_terrainData.csv\"\n  grid_terrain_pd = pd.read_csv(grid_terrain_file, header=0, index_col = 0)\n  grid_terrain_np = grid_terrain_pd.to_numpy()\n  \n  sentinel1_all_pd = sentinel1_all_pd[:modis_all_pd.shape[0]]\n  \n  \n  \n  print(\"modis_all_size: \", modis_all_pd.shape)\n  print(\"sentinel1_all_size: \", sentinel1_all_pd.shape)\n  print(\"gridmet rmax size: \", gridmet_rmax_all_pd.shape)\n  print(\"gridmet eto size: \", gridmet_eto_all_pd.shape)\n  print(\"gridmet vpd size: \", gridmet_vpd_all_pd.shape)\n  print(\"gridmet pr size: \", gridmet_pr_all_pd.shape)\n  print(\"gridmet rmin size: \", gridmet_rmin_all_pd.shape)\n  print(\"gridmet tmmn size: \", gridmet_tmmn_all_pd.shape)\n  print(\"gridmet tmmx size: \", gridmet_tmmx_all_pd.shape)\n  print(\"gridmet vs size: \", gridmet_vs_all_pd.shape)\n  print(\"grid terrain size: \", grid_terrain_pd.shape)\n  print(\"cell_size: \", len(submission_format_pd.index))\n  print(\"station size: \", station_cell_mapper_pd.shape)\n  print(\"training_feature_pd size: \", training_feature_pd.shape)\n  print(\"testing_feature_pd size: \", testing_feature_pd.shape)\n  print(\"grid_terrain_np shape: \", grid_terrain_np.shape)\n  \n  min_len = min( modis_all_pd.shape[0], sentinel1_all_pd.shape[0], gridmet_rmax_all_pd.shape[0], gridmet_eto_all_pd.shape[0], gridmet_vpd_all_pd.shape[0], gridmet_pr_all_pd.shape[0], gridmet_rmin_all_pd.shape[0], gridmet_tmmn_all_pd.shape[0], gridmet_tmmx_all_pd.shape[0], gridmet_vs_all_pd.shape[0], grid_terrain_pd.shape[0] )\n  \n  cell_id_list = modis_all_pd.columns.values\n  \n  \n  \n  # create a multiple numpy array, the dimension is (cell_id, date, variable)\n  #all_testing_np = np.empty((len(modis_all_pd.index.values), len(modis_all_pd.columns.values),  23))\n  all_testing_np = np.empty((min_len, len(modis_all_pd.columns.values),  23))\n  print(\"final all numpy shape: \", all_testing_np.shape)\n  \n  modis_all_np = np.expand_dims(modis_all_np[:min_len, :], axis=2)\n  sentinel1_all_np = np.expand_dims(sentinel1_all_np[:min_len, :], axis=2)\n  gridmet_eto_all_np = np.expand_dims(gridmet_eto_all_np[:min_len, :], axis=2)\n  gridmet_pr_all_np = np.expand_dims(gridmet_pr_all_np[:min_len, :], axis=2)\n  gridmet_rmax_all_np = np.expand_dims(gridmet_rmax_all_np[:min_len, :], axis=2)\n  gridmet_rmin_all_np = np.expand_dims(gridmet_rmin_all_np[:min_len, :], axis=2)\n  gridmet_tmmn_all_np = np.expand_dims(gridmet_tmmn_all_np[:min_len, :], axis=2)\n  gridmet_tmmx_all_np = np.expand_dims(gridmet_tmmx_all_np[:min_len, :], axis=2)\n  gridmet_vpd_all_np = np.expand_dims(gridmet_vpd_all_np[:min_len, :], axis=2)\n  gridmet_vs_all_np = np.expand_dims(gridmet_vs_all_np[:min_len, :], axis=2)\n  \n  cell_id_np = np.expand_dims(cell_id_list, axis=0)\n  cell_id_np = np.repeat(cell_id_np, min_len, axis=0)\n  cell_id_np = np.expand_dims(cell_id_np, axis=2)\n  print(\"cell_id_np shape: \", cell_id_np.shape)\n  \n  grid_terrain_np = np.expand_dims(grid_terrain_np, axis=0)\n  grid_terrain_np = np.repeat(grid_terrain_np, min_len, axis=0)\n  \n  date_np = np.empty((min_len, len(modis_all_pd.columns.values),  3))\n  for i in range(min_len):\n    #print(i, \" - \", modis_all_pd.index.values[i])\n    date_time_obj = dt.strptime(modis_all_pd.index.values[i], '%Y-%m-%d')\n    date_np[i, :, 0] = date_time_obj.year\n    date_np[i, :, 1] = date_time_obj.month\n    date_np[i, :, 2] = date_time_obj.timetuple().tm_yday\n  \n  new_np = np.concatenate((cell_id_np, date_np, modis_all_np, sentinel1_all_np, gridmet_eto_all_np, gridmet_pr_all_np, gridmet_rmax_all_np, gridmet_rmin_all_np, gridmet_tmmn_all_np, gridmet_tmmx_all_np, gridmet_vpd_all_np, gridmet_vs_all_np, grid_terrain_np), axis=2)\n  print(\"new numpy shape: \", new_np.shape)\n  \n  new_np = new_np.reshape(-1,new_np.shape[-1])\n  print(\"reshaped: \", new_np.shape)\n  \n  #all_training_pd = pd.DataFrame(columns=[\"cell_id\", \"year\", \"m\", \"doy\", \"ndsi\", \"grd\", \"eto\", \"pr\", \"rmax\", \"rmin\", \"tmmn\", \"tmmx\", \"vpd\", \"vs\", \"lat\", \"lon\", \"elevation\", \"aspect\", \"curvature\", \"slope\", \"eastness\", \"northness\", \"swe\"])\n  all_testing_pd = pd.DataFrame(new_np, columns=[\"cell_id\", \"year\", \"m\", \"doy\", \"ndsi\", \"grd\", \"eto\", \"pr\", \"rmax\", \"rmin\", \"tmmn\", \"tmmx\", \"vpd\", \"vs\", \"lat\", \"lon\", \"elevation\", \"aspect\", \"curvature\", \"slope\", \"eastness\", \"northness\"])\n  \n  #print(\"MODIS all np shape: \", modis_all_np.shape)\n  #print(\"Terrain numpy shape: \", grid_terrain_np.shape)\n  \n  #print(\"Head\", all_testing_pd.head())\n  all_testing_pd.to_csv(all_ready_file)\n  \n  \n  \n#exit() # done already\n\nintegrate_modis()\nintegrate_sentinel1()\nintegrate_gridmet()\nprepare_testing_csv()\n\n\n  \n  \n  \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\iw3qtsvi9e1\\testing_data_integration.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410578181,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "b63prf",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pn0s6e75con",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\pn0s6e75con\\snowcast_utils.py\", line 3, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410577031,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8l4amb5mzp0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410575691,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "wdh394",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "9kbsascoe6e",
  "history_input" : "from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\nprint(sys.path)\n\ntry:\n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup\n\nnohrsc_url_format_string = \"https://www.nohrsc.noaa.gov/nearest/index.html?city={lat}%2C{lon}&county=&l=5&u=e&y={year}&m={month}&d={day}\"\n\ntest_noaa_query_url = nohrsc_url_format_string.format(lat=40.05352381745094, lon=-106.04027196859343, year=2022, month=5, day=4)\n\nprint(test_noaa_query_url)\n\nresponse = urllib.request.urlopen(test_noaa_query_url)\nwebContent = response.read().decode('UTF-8')\n\nprint(webContent)\n\n\nparsed_html = BeautifulSoup(webContent)\nprint(parsed_html.body.find('div', attrs={'class':'container'}).text)\n\n\n\n#snotel_point = SnotelPointData(\"713:CO:SNTL\", \"MyStation\")\n#df = snotel_point.get_daily_data(\n#    datetime(2020, 1, 2), datetime(2020, 1, 20),\n#    [snotel_point.ALLOWED_VARIABLES.SWE]\n#)\n#print(df)",
  "history_output" : "C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\numpy\\__init__.py:148: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service\n  from . import _distributor_init\nTraceback (most recent call last):\n  File \"C:\\Users\\BLi\\gw-workspace\\9kbsascoe6e\\data_snotel_real_time.py\", line 2, in <module>\n    from metloom.pointdata import SnotelPointData\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\metloom\\pointdata\\__init__.py\", line 1, in <module>\n    from .base import PointData, PointDataCollection\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\metloom\\pointdata\\base.py\", line 5, in <module>\n    import pandas as pd\n  File \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\lib\\site-packages\\pandas\\__init__.py\", line 16, in <module>\n    raise ImportError(\nImportError: Unable to import required dependencies:\nnumpy: \nIMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!\nImporting the numpy C-extensions failed. This error can happen for\nmany reasons, often due to issues with your setup or how NumPy was\ninstalled.\nWe have compiled some common reasons and troubleshooting tips at:\n    https://numpy.org/devdocs/user/troubleshooting-importerror.html\nPlease note and check the following:\n  * The Python version is: Python3.9 from \"C:\\Users\\BLi\\anaconda3\\envs\\snowcast\\python.exe\"\n  * The NumPy version is: \"1.21.5\"\nand make sure that they are the versions you expect.\nPlease carefully study the documentation linked above for further help.\nOriginal error was: DLL load failed while importing _multiarray_umath: The specified module could not be found.\n",
  "history_begin_time" : 1667410577695,
  "history_end_time" : 1667410651125,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "asknymcb4xx",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\n#pd.set_option('display.max_columns', None)\n",
  "history_output" : "",
  "history_begin_time" : 1667410576588,
  "history_end_time" : 1667410651126,
  "history_notes" : null,
  "history_process" : "ilbqzg",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pmg9f8o6ntm",
  "history_input" : "import os\n\nprint(\"get ucla data and stuff\")\n#https://nsidc.org/data/wus_ucla_sr/versions/1",
  "history_output" : "get ucla data and stuff\n",
  "history_begin_time" : 1667410576588,
  "history_end_time" : 1667410651126,
  "history_notes" : null,
  "history_process" : "3r5rpn",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hnhci0t7wtq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410651126,
  "history_notes" : null,
  "history_process" : "0tdceb",
  "host_id" : "100001",
  "indicator" : "Stopped"
}]
